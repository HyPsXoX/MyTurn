<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Test Bank System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .navbar.navbar-expand-lg.navbar-dark {
            background: linear-gradient(135deg, #001a8f 0%, #d4cc26 100%) !important;
        }
        .test-card { transition: transform 0.2s; border-left: 4px solid #0d6efd; }
        .test-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
        .expandable-row { background-color: #f8f9fa; }
        .question-item { border: 1px solid #dee2e6; border-radius: 8px; padding: 15px; margin-bottom: 15px; background: #f8f9fa; }
        .student-list { height: 300px; overflow-y: auto; border: 1px solid #dee2e6; border-radius: 0.375rem; }
        .student-item { padding: 0.5rem; border-bottom: 1px solid #dee2e6; cursor: pointer; }
        .student-item:hover { background-color: #f8f9fa; }
        .student-item.selected { background-color: #e7f1ff; border-left: 4px solid #0d6efd; }
        .transfer-buttons { display: flex; flex-direction: column; justify-content: center; gap: 10px; }
        .section-badge { cursor: pointer; margin: 2px; }
        .dropdown-toggle::after { display: none; }
        .choice-item, .answer-item { margin-bottom: 10px; padding: 10px; border: 1px solid #dee2e6; border-radius: 5px; background: white; }
        .file-preview { max-width: 100px; max-height: 100px; margin: 5px; border-radius: 4px; }
        .feedback-section { background: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 10px; }
        .test-title-link { color: #0d6efd; cursor: pointer; text-decoration: none; }
        .test-title-link:hover { text-decoration: underline; }
        .assigned-sections { max-width: 200px; }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-graduation-cap me-2"></i>Test Bank System
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    Welcome, <%= user ? user.fullName : "Dean User" %> (Dean)
                </span>
                <form action="/auth/logout" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-outline-light btn-sm">Logout</button>
                </form>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <nav class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
      <div class="position-sticky pt-3">
        <% const role = user?.role; %>
        <ul class="nav flex-column">

          <!-- Dean + Professor -->
          <% if (role === 'Dean' || role === 'Professor') { %>
          <li class="nav-item">
            <a class="nav-link" href="/dean/dashboard">
              <i class="fas fa-tachometer-alt me-2"></i>Dashboard
            </a>
          </li>
          <% } %>

          <!-- Dean ONLY -->
          <% if (role === 'Dean') { %>
          <li class="nav-item">
            <a class="nav-link" href="/dean/manage-accounts">
              <i class="fas fa-users-cog me-2"></i>Manage Accounts
            </a>
          </li>
          <% } %>

          <!-- Dean + Professor -->
          <% if (role === 'Dean' || role === 'Professor') { %>
          <li class="nav-item">
            <a class="nav-link" href="/dean/tests">
              <i class="fas fa-file-alt me-2"></i>Test Management
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/dean/student-performance">
              <i class="fas fa-chart-line me-2"></i>Student Performance
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/dean/reports">
              <i class="fas fa-chart-bar me-2"></i>Reports & Analytics
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/dean/account">
              <i class="fas fa-user-cog me-2"></i>My Account
            </a>
          </li>
          <% } %>

        </ul>
      </div>
    </nav>


            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <!-- Header -->
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2"><i class="fas fa-file-alt me-2"></i><%= title %></h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createTestModal"><i class="fas fa-plus me-2"></i>Create Test</button>
                        <button class="btn btn-outline-secondary" id="toggleAllSections"><i class="fas fa-expand me-2"></i>Show Assigned Sections</button>
                    </div>
                </div>

                <!-- Search Bar -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <input type="text" class="form-control" id="testSearch" placeholder="Search tests by title, subject code, or description...">
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" id="testFilter">
                                    <option value="">All Tests</option>
                                    <option value="Public">Public Tests</option>
                                    <option value="Private">Private Tests</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Overview Cards -->
                <div class="row mb-4">
                    <div class="col-md-3"><div class="card text-white bg-primary"><div class="card-body"><div class="d-flex justify-content-between"><div><h4 id="totalTestsCount">0</h4><p>Total Tests</p></div><i class="fas fa-file-alt fa-2x"></i></div></div></div></div>
                    <div class="col-md-3"><div class="card text-white bg-success"><div class="card-body"><div class="d-flex justify-content-between"><div><h4 id="publicTestsCount">0</h4><p>Public Tests</p></div><i class="fas fa-unlock fa-2x"></i></div></div></div></div>
                    <div class="col-md-3"><div class="card text-white bg-warning"><div class="card-body"><div class="d-flex justify-content-between"><div><h4 id="privateTestsCount">0</h4><p>Private Tests</p></div><i class="fas fa-lock fa-2x"></i></div></div></div></div>
                    <div class="col-md-3"><div class="card text-white bg-info"><div class="card-body"><div class="d-flex justify-content-between"><div><h4 id="activeTestsCount">0</h4><p>Active Tests</p></div><i class="fas fa-play-circle fa-2x"></i></div></div></div></div>
                </div>

                <!-- Tests Table -->
                <div class="card">
                    <div class="card-header"><h5 class="mb-0">All Tests</h5></div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped align-middle">
                                <thead>
                                    <tr>
                                        <th style="width:25%">Title</th>
                                        <th style="width:10%">Subject Code</th>
                                        <th style="width:8%">Access</th>
                                        <th style="width:15%">Assigned</th>
                                        <th style="width:10%">Created By</th>
                                        <th style="width:12%">Created/Updated</th>
                                        <th style="width:10%">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="testsTableBody"><!-- populated by JS --></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Create Test Modal -->
    <div class="modal fade" id="createTestModal" tabindex="-1">
        <div class="modal-dialog modal-xl"><div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Create New Test</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
            <div class="modal-body">
                <form id="testForm">
                    <div class="row mb-4">
                        <div class="col-md-8">
                            <h6>Test Information</h6>
                            <div class="row">
                                <div class="col-md-6 mb-3"><label class="form-label">Title *</label><input type="text" class="form-control" name="title" required></div>
                                <div class="col-md-6 mb-3"><label class="form-label">Subject Code *</label><input type="text" class="form-control" name="subjectCode" required></div>
                            </div>
                            <div class="mb-3"><label class="form-label">Description</label><textarea class="form-control" name="description" rows="3"></textarea></div>
                            <div class="row">
                                <div class="col-md-4 mb-3"><label class="form-label">Time Limit (minutes)</label><input type="number" class="form-control" name="timeLimit" min="1" value="60"></div>
                                <div class="col-md-4 mb-3"><label class="form-label">Deadline</label><input type="datetime-local" class="form-control" name="deadline"></div>
                                <div class="col-md-4 mb-3"><label class="form-label">Access *</label><select class="form-select" name="access" required><option value="Public">Public</option><option value="Private" selected>Private</option></select></div>
                            </div>
                            <div class="mb-3"><label class="form-label">How Many Questions Per Student *</label><input type="number" class="form-control" name="howManyQuestions" min="1" value="10" required></div>
                            <div class="mb-3"><label class="form-label">Passing Points</label><input type="number" class="form-control" name="passingPoints" min="0" value="0"></div>
                            <div class="mb-3">
                                <button type="button" class="btn btn-outline-primary me-2" data-bs-toggle="modal" data-bs-target="#assignSectionsModal"><i class="fas fa-users me-1"></i>Assign Sections</button>
                                <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#prerequisitesModal"><i class="fas fa-list-check me-1"></i>Set Prerequisites</button>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <h6>Test Summary</h6>
                            <div class="card"><div class="card-body">
                                <div class="mb-2"><strong>Total Questions:</strong> <span id="totalQuestions">0</span></div>
                                <div class="mb-2"><strong>Total Points:</strong> <span id="totalPoints">0</span></div>
                                <div class="mb-2"><strong>Passing Points:</strong> <span id="passingPointsDisplay">0</span></div>
                                <div class="mb-2"><strong>Question Types:</strong> <div id="questionTypesSummary"></div></div>
                                <div class="mb-2"><strong>Assigned Sections:</strong> <div id="assignedSectionsSummary">None</div></div>
                                <div class="mb-2"><strong>Prerequisites:</strong> <div id="prerequisitesSummary">None</div></div>
                            </div></div>
                        </div>
                    </div>

                    <!-- Questions Section -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6>Questions</h6>
                            <button type="button" class="btn btn-success btn-sm" id="addQuestionBtn"><i class="fas fa-plus me-1"></i>Add Question</button>
                        </div>
                        <div id="questionsContainer"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="button" class="btn btn-primary" id="saveTestBtn">Save Test</button></div>
        </div></div>
    </div>

    <!-- Test Details Modal -->
    <div class="modal fade" id="testDetailsModal" tabindex="-1"><div class="modal-dialog modal-lg"><div class="modal-content">
        <div class="modal-header"><h5 class="modal-title">Test Details</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
        <div class="modal-body" id="testDetailsContent"></div>
    </div></div></div>

    <!-- Assign Sections Modal -->
    <div class="modal fade" id="assignSectionsModal" tabindex="-1"><div class="modal-dialog modal-xl"><div class="modal-content">
        <div class="modal-header"><h5 class="modal-title">Assign Sections to Test</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
        <div class="modal-body">
            <div class="row">
                <div class="col-md-5"><div class="card"><div class="card-header"><h6 class="mb-0">Available Sections</h6></div><div class="card-body"><div class="mb-3"><input type="text" class="form-control" id="availableSectionSearch" placeholder="Search sections..."></div><div class="student-list" id="availableSections"></div></div></div></div>
                <div class="col-md-2 transfer-buttons"><button class="btn btn-primary" id="addToTest"><i class="fas fa-arrow-right"></i><br>Add to Test</button><button class="btn btn-outline-primary" id="removeFromTest"><i class="fas fa-arrow-left"></i><br>Remove</button></div>
                <div class="col-md-5"><div class="card"><div class="card-header"><h6 class="mb-0">Assigned Sections</h6></div><div class="card-body"><div class="mb-3"><input type="text" class="form-control" id="assignedSectionSearch" placeholder="Search sections..."></div><div class="student-list" id="assignedSections"></div></div></div></div>
            </div>
        </div>
        <div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="button" class="btn btn-primary" id="saveSectionAssignment">Save Assignment</button></div>
    </div></div></div>

    <!-- Prerequisites Modal -->
    <div class="modal fade" id="prerequisitesModal" tabindex="-1"><div class="modal-dialog modal-lg"><div class="modal-content">
        <div class="modal-header"><h5 class="modal-title">Set Test Prerequisites</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
        <div class="modal-body">
            <div class="alert alert-info"><i class="fas fa-info-circle me-2"></i>Students must complete these tests before they can take the current test.</div>
            <div class="card"><div class="card-header"><h6 class="mb-0">Available Tests</h6></div><div class="card-body"><div class="mb-3"><input type="text" class="form-control" id="prerequisiteSearch" placeholder="Search tests..."></div><div class="student-list" id="availablePrerequisites"></div></div></div>
            <div class="card mt-3"><div class="card-header"><h6 class="mb-0">Selected Prerequisites</h6></div><div class="card-body"><div id="selectedPrerequisites"></div></div></div>
        </div>
        <div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="button" class="btn btn-primary" id="savePrerequisites">Save Prerequisites</button></div>
    </div></div></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
    // ---------- state ----------
    let allTests = [];
    let sections = [];
    let showAllSections = false;
    let currentTestForAssignment = null; // when editing an existing test this should be set to that test's _id
    let selectedAvailableSections = [];
    let selectedAssignedSections = [];
    let questionCount = 0;
    let selectedPrerequisites = []; // holds prereq ids for "new" test creation or when editing before saving

    // ---------- utils ----------
    function formatDate(d) {
        if (!d) return 'N/A';
        try { return new Date(d).toLocaleString(); } catch (e) { return d; }
    }

    // ---------- data loading ----------
    async function loadInitialData() {
        try {
            const res = await fetch('/api/tests');
            if (!res.ok) throw new Error('Failed to load tests');
            allTests = await res.json();
        } catch (err) {
            console.error('Error loading tests:', err);
            allTests = [];
        }

        // Try loading sections from an API endpoint. If not available, sections remain empty.
        try {
            const sres = await fetch('/api/sections');
            if (sres.ok) sections = await sres.json();
            else sections = [];
        } catch (err) {
            console.warn('No /api/sections endpoint or error fetching sections:', err);
            sections = [];
        }

        renderTestsTable();
        updateOverviewCards();
    }

    // ---------- rendering ----------
    function renderTestsTable() {
        const tableBody = document.getElementById('testsTableBody');
        tableBody.innerHTML = '';

        const filter = document.getElementById('testFilter')?.value || '';
        const search = (document.getElementById('testSearch')?.value || '').toLowerCase();

        const testsToShow = allTests.filter(test => {
            if (filter && test.access !== filter) return false;
            if (!search) return true;
            return (test.title || '').toLowerCase().includes(search) ||
                   (test.subjectCode || '').toLowerCase().includes(search) ||
                   (test.description || '').toLowerCase().includes(search);
        });

        testsToShow.forEach(test => {
            const row = document.createElement('tr');

            const assignedSections = test.assignedSections && test.assignedSections.length > 0
                ? test.assignedSections.map(s => `<span class="badge bg-secondary">${s}</span>`).join(' ')
                : '<span class="text-muted">None</span>';

            row.innerHTML = `
                <td><a class="test-title-link" onclick="viewTestDetails('${test._id}')">${test.title}</a></td>
                <td>${test.subjectCode || ''}</td>
                <td><span class="badge ${test.access === 'Public' ? 'bg-success' : 'bg-warning'}">${test.access || ''}</span></td>
                <td class="assigned-sections">${assignedSections}</td>
                <td>${test.createdByName || (test.createdBy && test.createdBy.firstName ? (test.createdBy.firstName + ' ' + (test.createdBy.lastName||'')) : '')}</td>
                <td><small>Created: ${formatDate(test.createdAt)}</small><br><small>Updated: ${formatDate(test.updatedAt)}</small></td>
                <td>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown"><i class="fas fa-ellipsis-v"></i></button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="duplicateTest('${test._id}')"><i class="fas fa-copy me-2"></i>Duplicate</a></li>
                            <li><a class="dropdown-item" href="#" onclick="openAssignSections('${test._id}')"><i class="fas fa-users me-2"></i>Assign</a></li>
                            <li><a class="dropdown-item" href="#" onclick="openEditTest('${test._id}')"><i class="fas fa-edit me-2"></i>Edit</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteTest('${test._id}')"><i class="fas fa-trash me-2"></i>Delete</a></li>
                        </ul>
                    </div>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

    function updateOverviewCards() {
        const totalTests = allTests.length;
        const publicTests = allTests.filter(t => t.access === 'Public').length;
        const privateTests = allTests.filter(t => t.access === 'Private').length;
        const activeTests = allTests.filter(t => !t.deadline || new Date(t.deadline) > new Date()).length;

        document.getElementById('totalTestsCount').textContent = totalTests;
        document.getElementById('publicTestsCount').textContent = publicTests;
        document.getElementById('privateTestsCount').textContent = privateTests;
        document.getElementById('activeTestsCount').textContent = activeTests;
    }

    // ---------- CRUD actions (use API) ----------
    async function viewTestDetails(testId) {
        try {
            let test = allTests.find(t => t._id === testId);
            if (!test) {
                const res = await fetch(`/api/tests/${testId}`);
                if (!res.ok) { alert('Failed to fetch test details'); return; }
                test = await res.json();
            }

            let questionsHTML = '';
            (test.questions || []).forEach((q, index) => {
                questionsHTML += `
                    <div class="question-item mb-3">
                        <h6>Question ${index + 1} (${q.points || 0} points)</h6>
                        <p><strong>${q.text || ''}</strong></p>
                        <div class="ms-3">
                `;
                if (q.type === 'multiple') {
                    questionsHTML += '<p><strong>Choices:</strong></p><ul>';
                    (q.choices || []).forEach(choice => {
                        const isCorrect = Array.isArray(q.correctAnswer) ? q.correctAnswer.includes(choice) : q.correctAnswer === choice;
                        questionsHTML += `<li>${choice} ${isCorrect ? '<span class="badge bg-success">Correct</span>' : ''}</li>`;
                    });
                    questionsHTML += '</ul>';
                } else if (q.type === 'identification') {
                    questionsHTML += `<p><strong>Answer:</strong> ${q.answer || ''}</p>`;
                } else if (q.type === 'enumeration') {
                    questionsHTML += '<p><strong>Answers:</strong></p><ul>';
                    (q.answers || []).forEach(answer => { questionsHTML += `<li>${answer}</li>`; });
                    questionsHTML += '</ul>';
                } else if (q.type === 'essay') {
                    questionsHTML += `<p><strong>Expected Answer:</strong> ${q.expectedAnswer || 'N/A'}</p>`;
                }
                questionsHTML += `</div></div>`;
            });

            const assignedSections = test.assignedSections && test.assignedSections.length > 0
                ? test.assignedSections.map(s => `<span class="badge bg-secondary me-1">${s}</span>`).join('')
                : '<span class="text-muted">None</span>';

            const prerequisites = test.prerequisites && test.prerequisites.length > 0
                ? test.prerequisites.map(p => {
                    const prereqTest = allTests.find(t => t._id === p);
                    return prereqTest ? `<span class="badge bg-info me-1">${prereqTest.title}</span>` : '';
                }).join('') : '<span class="text-muted">None</span>';

            document.getElementById('testDetailsContent').innerHTML = `
                <div class="row">
                    <div class="col-md-8">
                        <h4>${test.title}</h4>
                        <p class="text-muted">${test.description || ''}</p>
                        <div class="row mb-3">
                            <div class="col-md-4"><strong>Subject Code:</strong> ${test.subjectCode || ''}</div>
                            <div class="col-md-4"><strong>Access:</strong> <span class="badge ${test.access === 'Public' ? 'bg-success' : 'bg-warning'}">${test.access || ''}</span></div>
                            <div class="col-md-4"><strong>Time Limit:</strong> ${test.timeLimit || ''} minutes</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4"><strong>Questions Per Student:</strong> ${test.howManyQuestions || ''}</div>
                            <div class="col-md-4"><strong>Passing Points:</strong> ${test.passingPoints || ''}</div>
                            <div class="col-md-4"><strong>Deadline:</strong> ${test.deadline ? formatDate(test.deadline) : 'None'}</div>
                        </div>
                        <div class="mb-3"><strong>Assigned Sections:</strong><br>${assignedSections}</div>
                        <div class="mb-3"><strong>Prerequisites:</strong><br>${prerequisites}</div>
                    </div>
                    <div class="col-md-4">
                        <div class="card"><div class="card-body">
                            <h6>Test Summary</h6>
                            <p><strong>Total Questions:</strong> ${ (test.questions||[]).length }</p>
                            <p><strong>Total Points:</strong> ${ (test.questions||[]).reduce((s,q)=>s+(q.points||0),0) }</p>
                            <p><strong>Created By:</strong> ${test.createdByName||''}</p>
                            <p><strong>Created:</strong> ${formatDate(test.createdAt)}</p>
                            <p><strong>Last Updated:</strong> ${formatDate(test.updatedAt)}</p>
                        </div></div>
                    </div>
                </div>
                <hr>
                <h5>Questions</h5>
                ${questionsHTML}
            `;

            const modal = new bootstrap.Modal(document.getElementById('testDetailsModal'));
            modal.show();
        } catch (err) {
            console.error('Error viewing test details:', err);
            alert('Failed to load test details');
        }
    }

    // Open Assign Sections modal for an existing test (helper)
    function openAssignSections(testId) {
        currentTestForAssignment = testId;
        populateSectionAssignment();
        const modal = new bootstrap.Modal(document.getElementById('assignSectionsModal'));
        modal.show();
    }

    // ---------- EDIT: populate full questions when editing ----------
    // Helper: render a question object into the create/edit modal form
    function renderQuestionInForm(questionObj) {
        // create a blank question in the DOM
        addQuestion(); // increments questionCount and appends template
        // last appended question element
        const container = document.getElementById('questionsContainer');
        const qEl = container.lastElementChild;
        if (!qEl) return;

        // Set text and points
        qEl.querySelector('.question-text').value = questionObj.text || '';
        qEl.querySelector('.question-points').value = questionObj.points || 0;

        // Set feedback text if present
        if (questionObj.feedbackWhenCorrect && questionObj.feedbackWhenCorrect.text) {
            qEl.querySelector('.feedback-correct').value = questionObj.feedbackWhenCorrect.text;
        }
        if (questionObj.feedbackWhenIncorrect && questionObj.feedbackWhenIncorrect.text) {
            qEl.querySelector('.feedback-incorrect').value = questionObj.feedbackWhenIncorrect.text;
        }

        // select type and render answer section
        const typeSelect = qEl.querySelector('.question-type');
        typeSelect.value = questionObj.type || '';
        // trigger renderAnswerSection directly so input names and containers are created
        renderAnswerSection(qEl, questionObj.type);

        // populate answers based on type
        const qType = questionObj.type;
        if (qType === 'multiple') {
            const choicesContainer = qEl.querySelector('.choices-container');
            // clear default choices
            choicesContainer.innerHTML = '';
            const choices = Array.isArray(questionObj.choices) ? questionObj.choices : [];
            const correctAns = questionObj.correctAnswer || [];
            for (let i = 0; i < choices.length; i++) {
                const letter = String.fromCharCode(65 + i);
                const choiceHTML = `
                    <div class="choice-item">
                        <div class="input-group">
                            <span class="input-group-text">${letter}</span>
                            <input type="text" class="form-control choice-text" placeholder="Choice ${letter}" required>
                            <div class="input-group-text">
                                <input class="form-check-input correct-choice" type="checkbox" value="${letter}">
                            </div>
                            <button type="button" class="btn btn-outline-danger remove-choice"><i class="fas fa-times"></i></button>
                        </div>
                    </div>
                `;
                choicesContainer.insertAdjacentHTML('beforeend', choiceHTML);
            }
            // set texts and correct checkboxes
            const choiceTextEls = choicesContainer.querySelectorAll('.choice-text');
            choiceTextEls.forEach((inp, idx) => {
                inp.value = choices[idx] || '';
            });
            // mark correct choices: support stored correctAnswer being letters OR choice texts
            const correctSet = new Set(Array.isArray(correctAns) ? correctAns.map(String) : [String(correctAns)]);
            choicesContainer.querySelectorAll('.correct-choice').forEach((cb, idx) => {
                const letter = String.fromCharCode(65 + idx);
                const choiceText = (choices[idx] || '').toString();
                cb.checked = correctSet.has(letter) || correctSet.has(choiceText);
            });
            // wire remove-choice buttons
            choicesContainer.querySelectorAll('.remove-choice').forEach(btn => btn.onclick = (e)=>{ e.target.closest('.choice-item').remove(); updateTestSummary(); });
            // wire add-choice on this question
            qEl.querySelectorAll('.add-choice').forEach(btn => btn.onclick = () => {
                const container = qEl.querySelector('.choices-container');
                const nextLetter = String.fromCharCode(65 + container.children.length);
                container.insertAdjacentHTML('beforeend', `<div class="choice-item"><div class="input-group"><span class="input-group-text">${nextLetter}</span><input type="text" class="form-control choice-text" placeholder="Choice ${nextLetter}" required><div class="input-group-text"><input class="form-check-input correct-choice" type="checkbox" value="${nextLetter}"></div><button type="button" class="btn btn-outline-danger remove-choice"><i class="fas fa-times"></i></button></div></div>`);
                attachQuestionHandlers();
                updateTestSummary();
            });
        } else if (qType === 'truefalse') {
            const radios = qEl.querySelectorAll('.correct-choice');
            const correct = questionObj.correctAnswer !== undefined ? String(questionObj.correctAnswer) : null;
            radios.forEach(r => { r.checked = (correct !== null && r.value === correct); });
        } else if (qType === 'enumeration') {
            const enumContainer = qEl.querySelector('.enumeration-container');
            enumContainer.innerHTML = '';
            const answers = Array.isArray(questionObj.answers) ? questionObj.answers : [];
            answers.forEach((ans, idx) => {
                const html = `<div class="answer-item"><div class="input-group"><input type="text" class="form-control enumeration-answer" placeholder="Answer ${idx+1}" required></div></div>`;
                enumContainer.insertAdjacentHTML('beforeend', html);
            });
            // wire add-enum
            qEl.querySelectorAll('.add-enum').forEach(btn => btn.onclick = () => {
                const container = qEl.querySelector('.enumeration-container');
                const count = container.children.length + 1;
                container.insertAdjacentHTML('beforeend', `<div class="answer-item"><div class="input-group"><input type="text" class="form-control enumeration-answer" placeholder="Answer ${count}" required></div></div>`);
            });
            // set values
            qEl.querySelectorAll('.enumeration-answer').forEach((inp, idx) => inp.value = answers[idx] || '');
            const requiredCountEl = qEl.querySelector('.enumeration-required');
            if (requiredCountEl) requiredCountEl.value = questionObj.requiredCount || (answers.length || 1);
        } else if (qType === 'identification') {
            const idContainer = qEl.querySelector('.identification-container');
            idContainer.innerHTML = '';
            const answers = Array.isArray(questionObj.answers) ? questionObj.answers : [];
            answers.forEach((ans, idx) => {
                idContainer.insertAdjacentHTML('beforeend', `<div class="answer-item"><div class="input-group"><input type="text" class="form-control identification-answer" placeholder="Correct Answer ${idx+1}" required></div></div>`);
            });
            qEl.querySelectorAll('.identification-answer').forEach((inp, idx) => inp.value = answers[idx] || '');
            // wire add-id
            qEl.querySelectorAll('.add-id').forEach(btn => btn.onclick = () => {
                const container = qEl.querySelector('.identification-container');
                const count = container.children.length + 1;
                container.insertAdjacentHTML('beforeend', `<div class="answer-item"><div class="input-group"><input type="text" class="form-control identification-answer" placeholder="Correct Answer ${count}" required></div></div>`);
            });
        } else if (qType === 'essay') {
            const ea = qEl.querySelector('.essay-answer');
            if (ea) ea.value = questionObj.expectedAnswer || (questionObj.answer || '');
        }

        // Note: files cannot be set programmatically into file inputs for security reasons.
        // If you want to show existing file URLs, you could add a preview area and populate it here (not implemented).
        attachQuestionHandlers();
        updateTestSummary();
    }

    // Open Edit Test (populate create modal for editing) - improved: populate questions as well
    async function openEditTest(testId) {
        try {
            const test = allTests.find(t => t._id === testId) || await (await fetch(`/api/tests/${testId}`)).json();
            if (!test) { alert('Test not found'); return; }

            // set current editing id
            currentTestForAssignment = testId;
            selectedPrerequisites = Array.isArray(test.prerequisites) ? test.prerequisites.slice() : [];

            // populate basic fields
            const form = document.getElementById('testForm');
            form.querySelector('[name="title"]').value = test.title || '';
            form.querySelector('[name="subjectCode"]').value = test.subjectCode || '';
            form.querySelector('[name="description"]').value = test.description || '';
            form.querySelector('[name="timeLimit"]').value = test.timeLimit || '';
            if (test.deadline) form.querySelector('[name="deadline"]').value = new Date(test.deadline).toISOString().slice(0,16);
            form.querySelector('[name="access"]').value = test.access || 'Private';
            form.querySelector('[name="howManyQuestions"]').value = test.howManyQuestions || 1;
            form.querySelector('[name="passingPoints"]').value = test.passingPoints || 0;

            // populate prerequisites summary
            document.getElementById('prerequisitesSummary').innerHTML = selectedPrerequisites.length ? selectedPrerequisites.map(id => { const t=allTests.find(x=>x._id===id); return t ? t.title : id; }).join('<br>') : 'None';

            // clear and populate questions
            document.getElementById('questionsContainer').innerHTML = '';
            questionCount = 0;
            (Array.isArray(test.questions) ? test.questions : []).forEach(q => renderQuestionInForm(q));

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('createTestModal'));
            modal.show();
        } catch (err) {
            console.error('Error opening edit modal:', err);
            alert('Failed to open edit form: ' + (err.message || 'Unknown'));
        }
    }

    async function createTest() {
        const form = document.getElementById('testForm');
        if (!form.checkValidity()) { form.reportValidity(); return; }

        try {
            const formData = new FormData(form);
            const deadlineValue = (formData.get('deadline') || '').trim();

            const payload = {
                title: formData.get('title'),
                subjectCode: formData.get('subjectCode'),
                description: formData.get('description'),
                access: formData.get('access'),
                timeLimit: Number(formData.get('timeLimit')) || undefined,
                deadline: deadlineValue ? new Date(deadlineValue).toISOString() : undefined,
                howManyQuestions: Number(formData.get('howManyQuestions')),
                passingPoints: Number(formData.get('passingPoints')) || 0,
                assignedSections: [], // UI handles assignment separately
                prerequisites: selectedPrerequisites.slice(), // use the selectedPrerequisites state
                questions: []
            };

            // collect questions from DOM
            document.querySelectorAll('.question-item').forEach(q => {
                const type = q.querySelector('.question-type')?.value;
                if (!type) return;
                const question = {
                    text: q.querySelector('.question-text')?.value.trim(),
                    type,
                    points: Number(q.querySelector('.question-points')?.value) || 0,
                    choices: [],
                    correctAnswer: undefined,
                    answer: undefined,
                    answers: [],
                    files: [],
                    feedbackWhenCorrect: { text: q.querySelector('.feedback-correct')?.value.trim() || '', file: '' },
                    feedbackWhenIncorrect: { text: q.querySelector('.feedback-incorrect')?.value.trim() || '', file: '' }
                };

                if (type === 'multiple') {
                    question.choices = Array.from(q.querySelectorAll('.choice-text')).map(i => i.value.trim());
                    // correct-choice values are letter markers (A/B/...). Keep that format.
                    question.correctAnswer = Array.from(q.querySelectorAll('.correct-choice:checked')).map(c => c.value);
                } else if (type === 'truefalse') {
                    const sel = q.querySelector('.correct-choice:checked');
                    question.correctAnswer = sel ? sel.value : undefined;
                } else if (type === 'enumeration') {
                    question.answers = Array.from(q.querySelectorAll('.enumeration-answer')).map(a => a.value.trim());
                    question.requiredCount = Number(q.querySelector('.enumeration-required')?.value) || 1;
                } else if (type === 'identification') {
                    question.answers = Array.from(q.querySelectorAll('.identification-answer')).map(a => a.value.trim());
                } else if (type === 'essay') {
                    question.expectedAnswer = q.querySelector('.essay-answer')?.value.trim() || '';
                }

                payload.questions.push(question);
            });

            // Validate howManyQuestions vs total questions
            if (payload.howManyQuestions > payload.questions.length) {
                alert('How many questions per student cannot exceed total number of questions.');
                return;
            }

            // If editing existing test -> PUT, else POST
            let res;
            if (currentTestForAssignment) {
                res = await fetch(`/api/tests/${currentTestForAssignment}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
            } else {
                res = await fetch('/api/tests', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
            }

            if (!res.ok) {
                const err = await res.json().catch(()=>({message:'Unknown error'}));
                throw new Error(err.message || 'Failed to create/update test');
            }

            // refresh list
            await loadInitialData();

            const modal = bootstrap.Modal.getInstance(document.getElementById('createTestModal'));
            modal?.hide();
            form.reset();
            document.getElementById('questionsContainer').innerHTML = '';
            questionCount = 0;
            selectedPrerequisites = [];
            currentTestForAssignment = null;
            document.getElementById('prerequisitesSummary').innerHTML = 'None';
            alert('Test saved successfully!');
        } catch (err) {
            console.error('Error creating/updating test:', err);
            alert('Error creating/updating test: ' + (err.message || 'Unknown'));
        }
    }

    async function deleteTest(testId) {
        if (!confirm('Are you sure you want to delete this test? This action cannot be undone.')) return;
        try {
            const res = await fetch(`/api/tests/${testId}`, { method: 'DELETE' });
            if (!res.ok) throw new Error('Failed to delete test');
            await loadInitialData();
            alert('Test deleted successfully!');
        } catch (err) {
            console.error('Error deleting test:', err);
            alert('Failed to delete test');
        }
    }

    async function duplicateTest(testId) {
        try {
            const original = allTests.find(t => t._id === testId);
            if (!original) { alert('Original test not found'); return; }
            const copy = JSON.parse(JSON.stringify(original));
            delete copy._id;
            copy.title = `${copy.title} (Copy)`;
            copy.createdAt = new Date().toISOString();
            copy.updatedAt = new Date().toISOString();

            const res = await fetch('/api/tests', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(copy)
            });
            if (!res.ok) throw new Error('Failed to duplicate test');
            await loadInitialData();
            alert('Test duplicated successfully!');
        } catch (err) {
            console.error('Error duplicating test:', err);
            alert('Failed to duplicate test');
        }
    }

    // ---------- sections / assignment ----------
    function populateSectionAssignment() {
        const test = allTests.find(t => t._id === currentTestForAssignment);
        if (!test) return;
        const available = sections.filter(s => !test.assignedSections || !test.assignedSections.includes(s.name));
        const assigned = sections.filter(s => test.assignedSections && test.assignedSections.includes(s.name));

        const availEl = document.getElementById('availableSections'); availEl.innerHTML = '';
        available.forEach(s => {
            const div = document.createElement('div'); div.className = 'student-item';
            div.innerHTML = `<div class="form-check"><input class="form-check-input section-checkbox" type="checkbox" value="${s.name}"><label class="form-check-label">${s.name} (${s.course} - Year ${s.year})</label></div>`;
            availEl.appendChild(div);
        });

        const assignedEl = document.getElementById('assignedSections'); assignedEl.innerHTML = '';
        assigned.forEach(s => {
            const div = document.createElement('div'); div.className = 'student-item';
            div.innerHTML = `<div class="form-check"><input class="form-check-input section-checkbox" type="checkbox" value="${s.name}"><label class="form-check-label">${s.name} (${s.course} - Year ${s.year})</label></div>`;
            assignedEl.appendChild(div);
        });

        // set listeners (simple)
        document.querySelectorAll('#availableSections .section-checkbox').forEach(cb => cb.addEventListener('change', function(){ if(this.checked) selectedAvailableSections.push(this.value); else selectedAvailableSections = selectedAvailableSections.filter(v => v !== this.value); }));
        document.querySelectorAll('#assignedSections .section-checkbox').forEach(cb => cb.addEventListener('change', function(){ if(this.checked) selectedAssignedSections.push(this.value); else selectedAssignedSections = selectedAssignedSections.filter(v => v !== this.value); }));
    }

    document.getElementById('addToTest')?.addEventListener('click', function() {
        selectedAvailableSections.forEach(section => {
            const el = document.querySelector(`#availableSections input[value="${section}"]`);
            if (el) {
                const item = el.closest('.student-item');
                document.getElementById('assignedSections').appendChild(item);
                el.checked = false;
            }
        });
        selectedAvailableSections = [];
    });

    document.getElementById('removeFromTest')?.addEventListener('click', function() {
        selectedAssignedSections.forEach(section => {
            const el = document.querySelector(`#assignedSections input[value="${section}"]`);
            if (el) {
                const item = el.closest('.student-item');
                document.getElementById('availableSections').appendChild(item);
                el.checked = false;
            }
        });
        selectedAssignedSections = [];
    });

    document.getElementById('saveSectionAssignment')?.addEventListener('click', async function() {
        const test = allTests.find(t => t._id === currentTestForAssignment);
        if (!test) return;
        const assigned = Array.from(document.querySelectorAll('#assignedSections input[type="checkbox"]')).map(cb => cb.value);
        test.assignedSections = assigned;
        try {
            const res = await fetch(`/api/tests/${test._id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(test)
            });
            if (!res.ok) throw new Error('Failed to update test assignment');
            await loadInitialData();
            bootstrap.Modal.getInstance(document.getElementById('assignSectionsModal'))?.hide();
            alert('Section assignment updated successfully!');
        } catch (err) {
            console.error(err);
            alert('Failed to save assignment');
        }
    });

    // ---------- prerequisites ----------
    // When prerequisites modal opens, populate list and pre-check currently selected prerequisites
    document.getElementById('prerequisitesModal')?.addEventListener('show.bs.modal', function() {
        const container = document.getElementById('availablePrerequisites');
        container.innerHTML = '';

        // Determine currently selected prerequisites: if editing an existing test, use its prerequisites,
        // otherwise (creating new test) use selectedPrerequisites (local state).
        let currentSelected = [];
        if (currentTestForAssignment) {
            const test = allTests.find(t => t._id === currentTestForAssignment);
            currentSelected = test && Array.isArray(test.prerequisites) ? test.prerequisites.slice() : [];
        } else {
            currentSelected = selectedPrerequisites.slice();
        }

        allTests.forEach(test => {
            if (test._id === currentTestForAssignment) return; // can't be prereq of itself
            const checkedAttr = currentSelected.includes(String(test._id)) ? 'checked' : '';
            const div = document.createElement('div');
            div.className = 'student-item';
            div.innerHTML = `
                <div class="form-check">
                    <input class="form-check-input prerequisite-checkbox" type="checkbox" value="${test._id}" id="prereq-${test._id}" ${checkedAttr}>
                    <label class="form-check-label" for="prereq-${test._id}">${test.title} (${test.subjectCode})</label>
                </div>
            `;
            container.appendChild(div);
        });
    });

    // Save prerequisites - supports editing existing tests (PUT) and creating new tests (local state)
    document.getElementById('savePrerequisites')?.addEventListener('click', async function() {
        const container = document.getElementById('availablePrerequisites');
        if (!container) return;

        // collect selected prerequisites from modal
        const selected = Array.from(container.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);

        if (currentTestForAssignment) {
            // updating an existing test on the server
            const test = allTests.find(t => t._id === currentTestForAssignment);
            if (!test) {
                alert('Test not found for updating prerequisites.');
                return;
            }
            test.prerequisites = selected;
            try {
                const res = await fetch(`/api/tests/${test._id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(test)
                });
                if (!res.ok) {
                    const err = await res.json().catch(()=>({message:'Unknown error'}));
                    throw new Error(err.message || 'Failed to save prerequisites');
                }
                await loadInitialData();
                bootstrap.Modal.getInstance(document.getElementById('prerequisitesModal'))?.hide();
                alert('Prerequisites updated successfully!');
            } catch (err) {
                console.error('Failed to save prerequisites:', err);
                alert('Failed to save prerequisites: ' + (err.message || 'Unknown'));
            }
        } else {
            // creating a new test: store locally in selectedPrerequisites and update UI summary
            selectedPrerequisites = selected.slice();
            const summaryElement = document.getElementById('prerequisitesSummary');
            if (selectedPrerequisites.length > 0) {
                const names = selectedPrerequisites.map(id => {
                    const t = allTests.find(x => x._id === id);
                    return t ? t.title : id;
                });
                summaryElement.innerHTML = names.join('<br>');
            } else {
                summaryElement.innerHTML = 'None';
            }
            bootstrap.Modal.getInstance(document.getElementById('prerequisitesModal'))?.hide();
            alert('Prerequisites saved locally. They will be persisted when you save the test.');
        }
    });

    // ---------- question UI (reduced from static version, supports dynamic add/remove and type switching) ----------
    function getQuestionTemplate() {
        questionCount++;
        return `
            <div class="question-item" id="question-${questionCount}">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 class="mb-0">Question ${questionCount}</h6>
                    <button type="button" class="btn btn-danger btn-sm remove-question"><i class="fas fa-trash"></i></button>
                </div>
                <div class="mb-3"><label class="form-label">Question *</label><textarea class="form-control question-text" rows="2" required></textarea></div>
                <div class="row mb-3">
                    <div class="col-md-4"><label class="form-label">Type *</label><select class="form-select question-type" required><option value="">Select</option><option value="multiple">Multiple Choice</option><option value="truefalse">True or False</option><option value="enumeration">Enumeration</option><option value="identification">Identification</option><option value="essay">Essay</option></select></div>
                    <div class="col-md-3"><label class="form-label">Points *</label><input type="number" class="form-control question-points" min="1" value="1" required></div>
                    <div class="col-md-5"><label class="form-label">Attach File (Optional)</label><input type="file" class="form-control question-file" accept="image/*,video/*,audio/*,.pdf,.doc,.docx"></div>
                </div>
                <div class="question-answer-section"></div>
                <div class="feedback-section">
                    <h6>Feedback (Optional)</h6>
                    <div class="row">
                        <div class="col-md-6"><label class="form-label">When Correct</label><textarea class="form-control feedback-correct" rows="2"></textarea><input type="file" class="form-control mt-2 feedback-correct-file"></div>
                        <div class="col-md-6"><label class="form-label">When Incorrect</label><textarea class="form-control feedback-incorrect" rows="2"></textarea><input type="file" class="form-control mt-2 feedback-incorrect-file"></div>
                    </div>
                </div>
            </div>
        `;
    }

    function addQuestion() {
        const container = document.getElementById('questionsContainer');
        const wrapper = document.createElement('div');
        wrapper.innerHTML = getQuestionTemplate();
        container.appendChild(wrapper.firstElementChild);
        updateTestSummary();
    }

    function attachQuestionHandlers() {
        document.querySelectorAll('.remove-question').forEach(btn => {
            btn.onclick = (e) => { e.target.closest('.question-item').remove(); updateTestSummary(); };
        });
        document.querySelectorAll('.question-type').forEach(select => select.onchange = (e) => renderAnswerSection(e.target.closest('.question-item'), e.target.value));
        document.querySelectorAll('.question-points').forEach(inp => inp.oninput = updateTestSummary);
    }

    function renderAnswerSection(questionEl, type) {
        const section = questionEl.querySelector('.question-answer-section');
        if (!section) return;
        let html = '';
        switch(type) {
            case 'multiple':
                html = `<h6>Multiple Choice Answers</h6><div class="choices-container"><div class="choice-item"><div class="input-group"><span class="input-group-text">A</span><input type="text" class="form-control choice-text" placeholder="Choice A" required><div class="input-group-text"><input class="form-check-input correct-choice" type="checkbox" value="A"></div></div></div></div><button type="button" class="btn btn-outline-secondary btn-sm mt-2 add-choice">Add Choice</button>`;
                break;
            case 'truefalse':
                html = `<h6>True or False</h6><div class="choices-container"><div class="choice-item"><div class="form-check"><input class="form-check-input correct-choice" type="radio" name="tf-${Date.now()}" value="True" required><label class="form-check-label">True</label></div></div><div class="choice-item"><div class="form-check"><input class="form-check-input correct-choice" type="radio" name="tf-${Date.now()}" value="False"><label class="form-check-label">False</label></div></div></div>`;
                break;
            case 'enumeration':
                html = `<h6>Enumeration Answers</h6><div class="mb-3"><label class="form-label">Number of Answers Required</label><input type="number" class="form-control enumeration-required" min="1" value="1"></div><div class="enumeration-container"><div class="answer-item"><div class="input-group"><input type="text" class="form-control enumeration-answer" placeholder="Answer 1" required></div></div></div><button type="button" class="btn btn-outline-secondary btn-sm mt-2 add-enum">Add Answer</button>`;
                break;
            case 'identification':
                html = `<h6>Identification Answers</h6><div class="identification-container"><div class="answer-item"><div class="input-group"><input type="text" class="form-control identification-answer" placeholder="Correct Answer 1" required></div></div></div><button type="button" class="btn btn-outline-secondary btn-sm mt-2 add-id">Add Alternative Answer</button>`;
                break;
            case 'essay':
                html = `<h6>Essay Question</h6><div class="alert alert-info"><i class="fas fa-info-circle me-2"></i>This is an essay question. Answers will be manually evaluated.</div><div class="mb-3"><label class="form-label">Expected Answer (for reference)</label><textarea class="form-control essay-answer" rows="3"></textarea></div>`;
                break;
            default:
                html = '';
        }
        section.innerHTML = html;

        // Attach add-choice / add-enum / add-id handlers
        section.querySelectorAll('.add-choice').forEach(btn => btn.onclick = () => {
            const container = section.querySelector('.choices-container');
            const nextLetter = String.fromCharCode(65 + container.children.length);
            container.insertAdjacentHTML('beforeend', `<div class="choice-item"><div class="input-group"><span class="input-group-text">${nextLetter}</span><input type="text" class="form-control choice-text" placeholder="Choice ${nextLetter}" required><div class="input-group-text"><input class="form-check-input correct-choice" type="checkbox" value="${nextLetter}"></div></div></div>`);
            attachQuestionHandlers();
        });
        section.querySelectorAll('.add-enum').forEach(btn => btn.onclick = () => {
            const container = section.querySelector('.enumeration-container');
            const count = container.children.length + 1;
            container.insertAdjacentHTML('beforeend', `<div class="answer-item"><div class="input-group"><input type="text" class="form-control enumeration-answer" placeholder="Answer ${count}" required></div></div>`);
        });
        section.querySelectorAll('.add-id').forEach(btn => btn.onclick = () => {
            const container = section.querySelector('.identification-container');
            const count = container.children.length + 1;
            container.insertAdjacentHTML('beforeend', `<div class="answer-item"><div class="input-group"><input type="text" class="form-control identification-answer" placeholder="Correct Answer ${count}" required></div></div>`);
        });
    }

    function updateTestSummary() {
        const totalQuestions = document.querySelectorAll('.question-item').length;
        const totalPoints = Array.from(document.querySelectorAll('.question-points')).reduce((s, el) => s + (Number(el.value) || 0), 0);
        const typeCounts = {};
        document.querySelectorAll('.question-type').forEach(sel => { if (sel.value) typeCounts[sel.value] = (typeCounts[sel.value] || 0) + 1; });

        document.getElementById('totalQuestions').textContent = totalQuestions;
        document.getElementById('totalPoints').textContent = totalPoints;
        document.getElementById('questionTypesSummary').innerHTML = Object.entries(typeCounts).map(([t,c]) => `${t}: ${c}`).join('<br>') || 'No questions added';
        document.getElementById('passingPointsDisplay').textContent = document.getElementById('testForm')?.querySelector('[name="passingPoints"]')?.value || '0';
    }

    // ---------- initialization ----------
    document.addEventListener('DOMContentLoaded', async () => {
        // wire search/filter
        document.getElementById('testFilter')?.addEventListener('change', renderTestsTable);
        document.getElementById('testSearch')?.addEventListener('input', renderTestsTable);

        // add-question button
        document.getElementById('addQuestionBtn')?.addEventListener('click', () => { addQuestion(); attachQuestionHandlers(); });

        // save test
        document.getElementById('saveTestBtn')?.addEventListener('click', () => createTest());

        // load data
        await loadInitialData();

        // periodically attach handlers to dynamic elements
        setInterval(() => { attachQuestionHandlers(); updateTestSummary(); }, 1000);
    });
    </script>
</body>
</html>